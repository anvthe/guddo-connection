spring.application.name=guddo connection

server.port=8080
spring.datasource.url=jdbc:postgresql://localhost:5432/guddo_dev
spring.datasource.username=postgres
spring.datasource.password=password
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

#Hibernet Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql = true
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

spring.main.allow-circular-references=true

spring.web.resources.static-locations=classpath:/static/,classpath:/public/,classpath:/custom/



application.secret.key =DD3rFs0S8mRxHZ9pImi9AJBmeg4ylC1n4mKI9evPHgKzsonJpNTQdWXkWau8BPBk

# Explicitly list allowed origins
cors.allowed.origins=http://localhost:8080,http://localhost:3000
cors.max.age=3600


#server.servlet.context-path=/api/v1


# Set your app?s public base URL (used in redirect-uri templating)
#spring.security.oauth2.client.registration.base-url=http://localhost:8080



# Swagger
#springdoc.swagger-ui.path=/swagger-ui.html


#STRIPE PRODUCTION Payment Gateway Key
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET_KEY=


#Social configuration
spring.config.import=optional:classpath:application-secrets.properties

#LinkedIn OAuth2 Configuration
spring.security.oauth2.client.registration.linkedin.client-id=YOUR_LINKEDIN_CLIENT_ID
spring.security.oauth2.client.registration.linkedin.client-secret=YOUR_LINKEDIN_CLIENT_SECRET
spring.security.oauth2.client.registration.linkedin.client-name=LinkedIn
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress

spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id

# Twitter OAuth2 Configuration
spring.security.oauth2.client.registration.twitter.client-id=YOUR_TWITTER_CLIENT_ID
spring.security.oauth2.client.registration.twitter.client-secret=YOUR_TWITTER_CLIENT_SECRET
spring.security.oauth2.client.registration.twitter.client-name=Twitter
spring.security.oauth2.client.registration.twitter.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.twitter.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.twitter.scope=tweet.read,users.read,offline.access

# Explicit provider settings (sometimes required)
spring.security.oauth2.client.provider.twitter.authorization-uri=https://twitter.com/i/oauth2/authorize
spring.security.oauth2.client.provider.twitter.token-uri=https://api.twitter.com/2/oauth2/token
spring.security.oauth2.client.provider.twitter.user-info-uri=https://api.twitter.com/2/users/me
spring.security.oauth2.client.provider.twitter.user-name-attribute=id



# Facebook OAuth2 Configuration
spring.security.oauth2.client.registration.facebook.client-id=YOUR_FACEBOOK_CLIENT_ID
spring.security.oauth2.client.registration.facebook.client-secret=YOUR_FACEBOOK_CLIENT_SECRET
spring.security.oauth2.client.registration.facebook.client-name=Facebook
spring.security.oauth2.client.registration.facebook.scope=email,public_profile
spring.security.oauth2.client.registration.facebook.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Explicit provider settings (sometimes required)
spring.security.oauth2.client.provider.facebook.authorization-uri=https://www.facebook.com/v16.0/dialog/oauth
spring.security.oauth2.client.provider.facebook.token-uri=https://graph.facebook.com/v16.0/oauth/access_token
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,first_name,last_name,name,email
spring.security.oauth2.client.provider.facebook.user-name-attribute=id


# GitHub OAuth2 Configuration
spring.security.oauth2.client.registration.github.client-id=
spring.security.oauth2.client.registration.github.client-secret=
spring.security.oauth2.client.registration.github.client-name=GitHub
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Explicit provider settings
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id


# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Explicit provider settings (sometimes required)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub



#email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


# src/main/resources/application.properties
google.maps.api.key=